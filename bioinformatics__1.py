# -*- coding: utf-8 -*-
"""Bioinformatics_#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sgx9XUhxrPvgoAHz7VZ5baVa2gRXDGDe

# Finding the number of occurences of a motif(repeated pattern) within a string of DNA.
"""

genome = "TCAAGCGATTACGGGTTACGGGCTCTTACGGGTTACGGGTTACGGGATTACGGGATTACGGGGCCTACCGGTTACGGGTTACGGGCCGGTTTTACGGGTTACGGGCTGGTTACGGGTTACGGGTTACGGGTTACGGGCATTGGATTACGGGTTTACGGGTTTACGGGATTACGGGCCTTACGGGACGTTACGGGCCGTTACGGGCAGTTACGGGACTTTACGGGTAACAGTTACGGGAGTCGCCCTGTTATTACGGGGGGGCTGTTACGGGGGTTACGGGCTTTACGGGAATTACGGGTTACGGGTTACGGGTCATTACGGGTTACGGGCAGTGCTTACGGGGAACAGGTTACGGGCTTACGGGTGTTACGGGTTTACGGGTTACGGGTTACGGGAGTATTACGGGTTACGGGCCCCTGCGCGAGGTTACGGGAGCCCCATTACGGGTTACGGGTTACGGGTTACGGGGTTACGGGCTGTGTTACGGGTTACGGGATTACGGGCTTACGGGTTTACGGGCACGTGTTACGGGTGTACCATGCTTAAATTACGGGCTCTTACGGGGTTTACGGGACATATTACGGGTTACGGGATTGCTTACGGGATTACGGGTTACGGGGTTTACGGGTTACGGGTTACGGGTTACGGGGCGGCCTACGTTTTACGGGTTACGGGTTACGGGCAGGCGACTTACGGGTACAGACTTACGGGTTACGGGTTACGGGTTACGGGAGGGTTTCCTTACGGGCTCGTTTATGTTACGGGGTTACGGGACTGACCGAAATGTTACGGGCTCGCATTACGGGTTTTACGGGAAGATTACGGGTCTTTCTCCAGTTTACGGGCTTACGGGACCGATTACGGGTTACGGGATTTACGGGTGTGCTGTTACGGGCCCGAAGTTACGGGTTACGGGGAGTTACGGGCCCTTACGGGTTTACGGGTTTTACGGGTTCTTTACGGG"

repeated = "TTACGGGTT"


g_length = len( genome )

r_length = len( repeated )

length = g_length - (r_length - 1)


count = 0

for i in range( length ):

  #print( genome[ i:(i + r_length) ], repeated )

  if genome[ i:(i + r_length) ] == repeated:

    count += 1


print( count )

"""# Finding a repeated pattern of length 3."""

freq_table = {}

genome = "TAAACGTGAGAGAAACGTGCTGATTACACTTGTTCGTGTGGTAT"

k = 3

g_length = len( genome )


for i in range( g_length - k + 1 ):


  # Add the k-mer if it is not in the frequency table.
  if genome[ i:(i + k) ] not in freq_table.keys():

    freq_table[ genome[ i:(i + k) ] ] = 1

  else:

    freq_table[ genome[ i:(i + k) ] ] += 1


max_value = max( freq_table.values() )


print( max_value )

while True:

  max_element = max( freq_table, key=freq_table.get )

  if freq_table[ max_element ] != max_value:
    break 

  print( max_element )

  freq_table.pop( max_element )





print( "\n", freq_table, max( freq_table, key=freq_table.get ) )

"""# Finding the reverse complement of a gene."""

def ReverseComplement( P ):

  dictionairy = { 'A': 'T', 'G' : 'C', 'T' : 'A', 'C' : 'G' }

  P_r = P[::-1]

  P_rc = ""

  for i in range( len( P ) ):

    P_rc += dictionairy[ P_r[ i ] ]

  return P_rc

ReverseComplement( 'ATGC' )